{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "RettaADF"
		},
		"Event_based_trigger_building_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/87963fbe-cd3c-480f-8013-6c3b4ca708c1/resourceGroups/RettaDW/providers/Microsoft.Storage/storageAccounts/rettadatalake"
		},
		"Event_based_trigger_certificates_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/87963fbe-cd3c-480f-8013-6c3b4ca708c1/resourceGroups/RettaDW/providers/Microsoft.Storage/storageAccounts/rettadatalake"
		},
		"Event_based_trigger_contract_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/87963fbe-cd3c-480f-8013-6c3b4ca708c1/resourceGroups/RettaDW/providers/Microsoft.Storage/storageAccounts/rettadatalake"
		},
		"Event_based_trigger_customer_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/87963fbe-cd3c-480f-8013-6c3b4ca708c1/resourceGroups/RettaDW/providers/Microsoft.Storage/storageAccounts/rettadatalake"
		},
		"Event_based_trigger_hdd_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/87963fbe-cd3c-480f-8013-6c3b4ca708c1/resourceGroups/RettaDW/providers/Microsoft.Storage/storageAccounts/rettadatalake"
		},
		"Event_based_trigger_hdd_ref_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/87963fbe-cd3c-480f-8013-6c3b4ca708c1/resourceGroups/RettaDW/providers/Microsoft.Storage/storageAccounts/rettadatalake"
		},
		"Event_based_trigger_investment_proposal_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/87963fbe-cd3c-480f-8013-6c3b4ca708c1/resourceGroups/RettaDW/providers/Microsoft.Storage/storageAccounts/rettadatalake"
		},
		"Event_based_trigger_meter_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/87963fbe-cd3c-480f-8013-6c3b4ca708c1/resourceGroups/RettaDW/providers/Microsoft.Storage/storageAccounts/rettadatalake"
		},
		"Event_based_trigger_meter_relation_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/87963fbe-cd3c-480f-8013-6c3b4ca708c1/resourceGroups/RettaDW/providers/Microsoft.Storage/storageAccounts/rettadatalake"
		},
		"Event_based_trigger_operations_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/87963fbe-cd3c-480f-8013-6c3b4ca708c1/resourceGroups/RettaDW/providers/Microsoft.Storage/storageAccounts/rettadatalake"
		},
		"Event_based_trigger_site_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/87963fbe-cd3c-480f-8013-6c3b4ca708c1/resourceGroups/RettaDW/providers/Microsoft.Storage/storageAccounts/rettadatalake"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/get_current_weather')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getKeyVault",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://rettakvault.vault.azure.net/secrets/AccuWeatherAPI?api-version=7.3",
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Lookup  sites",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "getKeyVault",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "site_loc_key",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach site",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup  sites",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup  sites').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "site_id",
													"value": {
														"value": "@item().site_id",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "WeatherDS",
											"type": "DatasetReference",
											"parameters": {
												"loc_key": {
													"value": "@concat(item().loc_key, '?details=true&apikey=', activity('getKeyVault').output.value)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "WeatherSinkJson",
											"type": "DatasetReference",
											"parameters": {
												"file_name": {
													"value": "@concat('weather_',item().site_id, utcNow('yyyyMMddhh'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "accuweather"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-08T01:57:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/metryDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "metryIntg",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"endpoint": {
						"type": "string"
					}
				},
				"folder": {
					"name": "energy_datasets/api_ds"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().endpoint",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Event_based_trigger_building')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Sharepoint_data_ingestion",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/bronze/blobs/sharepoint/input/Build",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Event_based_trigger_building_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Event_based_trigger_certificates')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Sharepoint_data_ingestion",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/bronze/blobs/sharepoint/input/Certificates",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Event_based_trigger_certificates_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Event_based_trigger_contract')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Sharepoint_data_ingestion",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/bronze/blobs/sharepoint/input/Contract",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Event_based_trigger_contract_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Event_based_trigger_customer')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Sharepoint_data_ingestion",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/bronze/blobs/sharepoint/input/Customer",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Event_based_trigger_customer_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Event_based_trigger_hdd')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Sharepoint_data_ingestion",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/bronze/blobs/sharepoint/input/",
					"blobPathEndsWith": "hdd",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Event_based_trigger_hdd_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Event_based_trigger_hdd_ref')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Sharepoint_data_ingestion",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/bronze/blobs/sharepoint/input/hdd_ref",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Event_based_trigger_hdd_ref_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Event_based_trigger_investment_proposal')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Sharepoint_data_ingestion",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/bronze/blobs/sharepoint/input/Investment",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Event_based_trigger_investment_proposal_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Event_based_trigger_meter')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Sharepoint_data_ingestion",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/bronze/blobs/sharepoint/input/Meter",
					"blobPathEndsWith": "Meter",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Event_based_trigger_meter_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Event_based_trigger_meter_relation')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Sharepoint_data_ingestion",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/bronze/blobs/sharepoint/input/Meter_Relation",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Event_based_trigger_meter_relation_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Event_based_trigger_operations')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Sharepoint_data_ingestion",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/bronze/blobs/sharepoint/input/operation",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Event_based_trigger_operations_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Event_based_trigger_site')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Sharepoint_data_ingestion",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/bronze/blobs/sharepoint/input/Site",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Event_based_trigger_site_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/active_meters')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"description": "Save active meters in datalake.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "metryDS",
								"type": "DatasetReference",
								"parameters": {
									"endpoint": {
										"value": "@concat('meters?','box=',pipeline().parameters.box,'&','limit=',pipeline().parameters.limit)",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "active_meters_stg",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "save active_meters",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://adb-1558361433928880.0.azuredatabricks.net/api/2.0/jobs/run-now",
							"method": "POST",
							"headers": {
								"Authorization": "Bearer dapifd3996d8d885aab04c7cbd3d7f09de32-2"
							},
							"body": {
								"job_id": 470567759038934
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"box": {
						"type": "string",
						"defaultValue": "active"
					},
					"limit": {
						"type": "string",
						"defaultValue": "10000"
					},
					"Waitsec": {
						"type": "int",
						"defaultValue": 10
					}
				},
				"folder": {
					"name": "energy_pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/metryDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/daily_history')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "adding years",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(pipeline().parameters.startyear,pipeline().parameters.noofyears)",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "year",
										"value": {
											"value": "@add(item(),1)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "metry_call",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "adding years",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('year')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Authorization": "Bearer 722090723400a9181120f957636348769bae76b0cef705721e3884217ec8"
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "metryDS",
											"type": "DatasetReference",
											"parameters": {
												"endpoint": {
													"value": "@concat('consumptions/multi/day/',item(),'/?meters=',activity('Lookup1').output.firstRow._1)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "history_daily",
											"type": "DatasetReference",
											"parameters": {
												"year": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "daily_history code",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "metry_call",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://adb-1558361433928880.0.azuredatabricks.net/api/2.0/jobs/run-now",
							"method": "POST",
							"headers": {
								"Authorization": "Bearer dapifd3996d8d885aab04c7cbd3d7f09de32-2"
							},
							"body": {
								"job_id": 281403025512507
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "activemeter_list",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"startyear": {
						"type": "int",
						"defaultValue": 2017
					},
					"noofyears": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"variables": {
					"year": {
						"type": "Array",
						"defaultValue": []
					}
				},
				"folder": {
					"name": "energy_pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/metryDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/energy_dly_mnthly_ld')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Extract daily and monthly data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "metryDS",
								"type": "DatasetReference",
								"parameters": {
									"endpoint": {
										"value": "@concat('meters?','box=',pipeline().parameters.box,'&','limit=',pipeline().parameters.limit)",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "energy_dly_mnthly",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "parse and transform",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Extract daily and monthly data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://adb-1558361433928880.0.azuredatabricks.net/api/2.0/jobs/run-now",
							"method": "POST",
							"headers": {
								"Authorization": "Bearer dapifd3996d8d885aab04c7cbd3d7f09de32-2"
							},
							"body": {
								"job_id": 953228974256009
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Until1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Check API').output.state.result_state,'SUCCESS'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Fail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "{ Energy Daily and hourly Workflow failed }",
										"errorCode": "Failed"
									}
								}
							]
						}
					},
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "parse and transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(variables('JobStatus'),'Running'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check API",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat('https://adb-1558361433928880.0.azuredatabricks.net/api/2.1/jobs/runs/get?run_id=',activity('parse and transform').output.run_id)",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {
											"Authorization": "Bearer dapifd3996d8d885aab04c7cbd3d7f09de32-2"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check API",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "JobStatus",
										"value": {
											"value": "@if(\nor(\nequals(activity('Check API').output.state.life_cycle_state, 'PENDING'), equals(activity('Check API').output.state.life_cycle_state, 'RUNNING')\n),\n'Running',\nif(equals(activity('Check API').output.state.life_cycle_state,'FAILED'),'Failed',activity('Check API').output.state.result_state)\n)\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Wait to recheck API",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@pipeline().parameters.Waitsec",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"email": {
						"type": "string",
						"defaultValue": "prayank.sharma@routadigital.com"
					},
					"Waitsec": {
						"type": "int",
						"defaultValue": 30
					},
					"box": {
						"type": "string",
						"defaultValue": "active"
					},
					"limit": {
						"type": "string",
						"defaultValue": "10000"
					}
				},
				"variables": {
					"test": {
						"type": "String",
						"defaultValue": "1"
					},
					"JobStatus": {
						"type": "String",
						"defaultValue": "Running"
					}
				},
				"folder": {
					"name": "energy_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-08T01:57:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/metryDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/energy_hrly_ld')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Extract hourly data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "fetch last offset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": {
									"value": "@concat('{\"offset:\"','\"',activity('fetch last offset').output.firstRow.offset,'\"}')",
									"type": "Expression"
								},
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Cookie": "energimolnet=tchvk95ik75e5mbnp1k088c0nv1b25c1"
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "metryDS",
								"type": "DatasetReference",
								"parameters": {
									"endpoint": "streams/62bd9c2aacea0e68c708393c/consume"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "energy_hrly_stg",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "fetch last offset",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "hourlyOffset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Energy_hourly_parser",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Extract hourly data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://adb-1558361433928880.0.azuredatabricks.net/api/2.0/jobs/run-now",
							"method": "POST",
							"headers": {
								"Authorization": "Bearer dapifd3996d8d885aab04c7cbd3d7f09de32-2"
							},
							"body": {
								"job_id": 733327385784331
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Until1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Check API').output.state.result_state,'SUCCESS'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Fail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "{ Energy Hourly Workflow failed }",
										"errorCode": "Failed"
									}
								}
							]
						}
					},
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Energy_hourly_parser",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(variables('JobStatus'),'Running'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check API",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat('https://adb-1558361433928880.0.azuredatabricks.net/api/2.1/jobs/runs/get?run_id=',activity('Energy_hourly_parser').output.run_id)",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {
											"Authorization": "Bearer dapifd3996d8d885aab04c7cbd3d7f09de32-2"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check API",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "JobStatus",
										"value": {
											"value": "@if(\nor(\nequals(activity('Check API').output.state.life_cycle_state, 'PENDING'), equals(activity('Check API').output.state.life_cycle_state, 'RUNNING')\n),\n'Running',\nif(equals(activity('Check API').output.state.life_cycle_state,'FAILED'),'Failed',activity('Check API').output.state.result_state)\n)\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Wait to recheck API",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@pipeline().parameters.Waitsec",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Waitsec": {
						"type": "int",
						"defaultValue": 30
					}
				},
				"variables": {
					"JobStatus": {
						"type": "String",
						"defaultValue": "Running"
					}
				},
				"folder": {
					"name": "energy_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-28T04:13:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/metryDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/monthly_history')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "adding years",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(pipeline().parameters.startyear,pipeline().parameters.noofyears)",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "year",
										"value": {
											"value": "@add(item(),1)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "metry_call",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "adding years",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('year')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Authorization": "Bearer 722090723400a9181120f957636348769bae76b0cef705721e3884217ec8"
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "metryDS",
											"type": "DatasetReference",
											"parameters": {
												"endpoint": {
													"value": "@concat('consumptions/multi/month/',item(),'/?meters=',activity('Lookup1').output.firstRow._1)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "history_monthly",
											"type": "DatasetReference",
											"parameters": {
												"year": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "monthly_history code",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "metry_call",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://adb-1558361433928880.0.azuredatabricks.net/api/2.0/jobs/run-now",
							"method": "POST",
							"headers": {
								"Authorization": "Bearer dapifd3996d8d885aab04c7cbd3d7f09de32-2"
							},
							"body": {
								"job_id": 461208205112966
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "activemeter_list",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"startyear": {
						"type": "int",
						"defaultValue": 2017
					},
					"noofyears": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"variables": {
					"year": {
						"type": "Array",
						"defaultValue": []
					}
				},
				"folder": {
					"name": "energy_pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/metryDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get_weather')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "get_current_weather",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2022-09-14T16:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/get_current_weather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/All_data_ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Weather_parser",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Weather_parser",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Energy hourly",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "energy_hrly_ld",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Energy_daily",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "energy_dly_mnthly_ld",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Datawarehouse Loading",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Weather_parser",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CO2_pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Loading_datawarehouse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "CO2_pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Energy hourly",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Energy_daily",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CO2_fetch_parse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Waitsec": 30
							}
						}
					},
					{
						"name": "FinGridAPILoad",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Datawarehouse Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FinGridAPILoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Ingestion_pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/energy_hrly_ld')]",
				"[concat(variables('factoryId'), '/pipelines/energy_dly_mnthly_ld')]"
			]
		}
	]
}