{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "RettaADF"
		},
		"google_api_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('https://maps.googleapis.com/maps/api/geocode/json?key=',linkedService().key)}"
		},
		"metryIntg_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://app.metry.io/api/v2/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Is_pipeline_running')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://management.azure.com/subscriptions/@{variables('subscription_id')}/resourceGroups/@{pipeline().parameters.resourcename}/providers/Microsoft.DataFactory/factories/@{pipeline().parameters.factory}/queryPipelineRuns?api-version=2018-06-01",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{ \"lastUpdatedAfter\": \"@{addDays(utcNow(),int(pipeline().parameters.QueryRunDays))}\", \"lastUpdatedBefore\": \"@{utcNow()}\", \"filters\": [ { \"operand\": \"PipelineName\", \"operator\": \"Equals\", \"values\": [\"@{pipeline().parameters.PipelineName}\"] } ] }",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.core.windows.net/"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Web1').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(not(equals(item().runId,pipeline().parameters.ThisRunId)),or(equals(item().status,'InProgress'),equals(item().status,'Queued'))),equals(item().invokedBy.name,pipeline().TriggerName))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(int(activity('Filter1').output.FilteredItemsCount),1)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "running_pipeline_id",
										"value": {
											"value": "@activity('Filter1').output.Value.runId",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Web3",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "https://management.azure.com/subscriptions/@{variables('subscription_id')}/resourceGroups/@{pipeline().parameters.resourcename}/providers/Microsoft.DataFactory/factories/@{pipeline().parameters.factory}/pipelineruns/@{variables('running_pipeline_id')}/cancel?api-version=2018-06-01",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {},
										"body": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.core.windows.net/"
										}
									}
								},
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Web3",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Email_Notifier",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ErrorMessage": {
												"value": "@concat(variables('running_pipeline_id'),'has been cancelled because of of the new changes in the sharepoint. A new trigger has been activated')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Web2",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://management.azure.com/subscriptions?api-version=2020-01-01",
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.core.windows.net/"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Web2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "subscription_id",
							"value": {
								"value": "@replace(activity('Web2').output.value[0].id,'/subscriptions/','')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string",
						"defaultValue": "Sharepoint_data_ingestion"
					},
					"ThisRunId": {
						"type": "string"
					},
					"QueryRunDays": {
						"type": "string",
						"defaultValue": "-1"
					},
					"resourcename": {
						"type": "string",
						"defaultValue": "RettaDW"
					},
					"factory": {
						"type": "string",
						"defaultValue": "RettaADF"
					}
				},
				"variables": {
					"subscription_id": {
						"type": "String"
					},
					"running_pipeline_id": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LogPipeLine')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "InsertDatainLogTable",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "RettaDW",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "\ntruncate table Logtable\n\ninsert into Logtable (TableName,MaxDateForTable,SourceColumnUsedForLogging,IsIssue)\nselect   '[dbo].[energy_coeff_Monthly]' as TableName, Concat(Cast(MAX(yrmnth) as Varchar(50)),'01')MaxDateForTable,'yrmnth' SourceColumnForLogging,Case when Cast(MAX(yrmnth) as INT)= cast(format(GETDATE(),'yyyyMM') as int) then 1 else 0 End as IsIssue  from [dbo].[energy_coeff_Monthly]\nUNION\nselect  '[dbo].[CO2_emission]' as TableName, Concat(Cast(MAX(yrmnth) as Varchar(50)),'01') MaxDateForTable,'yrmnth' SourceColumnForLogging,\nCase when Cast(MAX(yrmnth) as int)= cast(format(GETDATE(),'yyyyMM') as int)  then 1 else 0 End as IsIssue from [dbo].[CO2_emission]\nUNION\nselect \n'[dbo].[dim_building]' as TableName, Cast(Cast(format(MAX(modified_dt),'yyyyMMdd') as INt) as Varchar(50)) MaxDateForTable,'modified_dt' SourceColumnForLogging,Case when Cast(format(MAX(modified_dt),'yyyyMM') as INt)= cast(format(GETDATE(),'yyyyMM') as int) then 1 else 0 End as IsIssue from [dbo].[dim_building]\nUNION\nselect \n'[dbo].[dim_certificates]' as TableName, Cast(Cast(format(MAX(modified_dt),'yyyyMMdd') as INt) as Varchar(50)) MaxDateForTable,'modified_dt' SourceColumnForLogging,Case when Cast(format(MAX(modified_dt),'yyyyMM') as INt)= cast(format(GETDATE(),'yyyyMM') as int) then 1 else 0 End as IsIssue from [dbo].dim_certificates\nUNION\nselect \n'[dbo].[dim_contract]' as TableName, Cast(Cast(format(MAX(modified_dt),'yyyyMMdd') as INt) as Varchar(50)) MaxDateForTable,'modified_dt' SourceColumnForLogging,Case when Cast(format(MAX(modified_dt),'yyyyMM') as INt)= cast(format(GETDATE(),'yyyyMM') as int) then 1 else 0 End as IsIssue from [dbo].[dim_contract]\nUNION\nselect \n'[dbo].[dim_customer]' as TableName, Cast(Cast(format(MAX(modified_dt),'yyyyMMdd') as INt) as Varchar(50)) MaxDateForTable,'modified_dt' SourceColumnForLogging,Case when Cast(format(MAX(modified_dt),'yyyyMM') as INt)= cast(format(GETDATE(),'yyyyMM') as int) then 1 else 0 End as IsIssue from [dbo].[dim_customer]\nUNION\nselect \n'[dbo].[dim_hdd]' as TableName, Cast(Cast(format(MAX(modified_dt),'yyyyMMdd') as INt) as Varchar(50)) MaxDateForTable,'modified_dt' SourceColumnForLogging,Case when Cast(format(MAX(modified_dt),'yyyyMM') as INt)= cast(format(GETDATE(),'yyyyMM') as int) then 1 else 0 End as IsIssue from [dbo].[dim_hdd]\nUNION\nselect \n'[dbo].[dim_hdd_ref]' as TableName, Cast(Cast(format(MAX(modified_dt),'yyyyMMdd') as INt) as Varchar(50)) MaxDateForTable,'modified_dt' SourceColumnForLogging,Case when Cast(format(MAX(modified_dt),'yyyyMM') as INt)= cast(format(GETDATE(),'yyyyMM') as int) then 1 else 0 End as IsIssue from [dbo].dim_hdd_ref\nUNION\nselect \n'[dbo].[dim_meter]' as TableName, Cast(Cast(format(MAX(modified_dt),'yyyyMMdd') as INt) as Varchar(50)) MaxDateForTable,'modified_dt' SourceColumnForLogging,Case when Cast(format(MAX(modified_dt),'yyyyMM') as INt)= cast(format(GETDATE(),'yyyyMM') as int) then 1 else 0 End as IsIssue from [dbo].dim_meter\nUNION\nselect \n'[dbo].[dim_operations]' as TableName, Cast(Cast(format(MAX(modified_dt),'yyyyMMdd') as INt) as Varchar(50)) MaxDateForTable,'modified_dt' SourceColumnForLogging,Case when Cast(format(MAX(modified_dt),'yyyyMM') as INt)= cast(format(GETDATE(),'yyyyMM') as int) then 1 else 0 End as IsIssue from [dbo].dim_operations\nUNION\nselect \n'[dbo].[dim_site]' as TableName, Cast(Cast(format(MAX(modified),'yyyyMMdd') as INt) as Varchar(50)) MaxDateForTable,'modified' SourceColumnForLogging,Case when Cast(format(MAX(modified),'yyyyMM') as INt)= cast(format(GETDATE(),'yyyyMM') as int) then 1 else 0 End as IsIssue from [dbo].dim_site\nUNION\nselect \n'[dbo].[energy_daily]' as TableName, Cast(Cast(format(MAX(dly_strt_dt),'yyyyMMdd') as INt) as Varchar(50)) MaxDateForTable,'dly_strt_dt' SourceColumnForLogging,Case when Cast(format(MAX(dly_strt_dt),'yyyyMM') as INt)= cast(format(GETDATE(),'yyyyMM') as int) then 1 else 0 End as IsIssue from [dbo].[energy_daily]\nUNION\nselect \n'[dbo].[energy_monthly]' as TableName, Cast(Cast(format(MAX(mnthly_strt_dt),'yyyyMMdd') as INt) as Varchar(50)) MaxDateForTable,'mnthly_strt_dt' SourceColumnForLogging,Case when Cast(format(MAX(mnthly_strt_dt),'yyyyMM') as INt)= cast(format(GETDATE(),'yyyyMM') as int) then 1 else 0 End as IsIssue from [dbo].[energy_monthly]\n\nUNION\nselect \n'[dbo].[energy_yearly]' as TableName, Cast(Cast(format(MAX(mnthly_strt_dt),'yyyyMMdd') as INt) as Varchar(50)) MaxDateForTable,'mnthly_strt_dt' SourceColumnForLogging,Case when Cast(format(MAX(mnthly_strt_dt),'yyyyMM') as INt)= cast(format(GETDATE(),'yyyyMM') as int) then 1 else 0 End as IsIssue from [dbo].[energy_yearly]\n\n\n\nselect * from Logtable where isissue=0\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FinGridAPI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FinGridApi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeurl": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().relativeurl",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TempTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RettaDW",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "TempEnergy_Coeff_Monthly"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WeatherAPI",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"loc_key": {
						"type": "string"
					}
				},
				"folder": {
					"name": "weather_datasets"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().loc_key",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherDSParam')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WeatherAPIParam",
					"type": "LinkedServiceReference",
					"parameters": {
						"location_key_param": {
							"value": "@dataset().location_keyds_param",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"location_keyds_param": {
						"type": "string"
					}
				},
				"folder": {
					"name": "weather_datasets"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherLocationDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_Weather_Location_Config",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "weather_datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "location_key_config.csv",
						"folderPath": "config",
						"container": "weather-raw"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherSinkJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "weather_datasets"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": "weather/input",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/active_meters_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "energy_datasets/storage_ds"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('active_meters', utcnow('yyyyMMdd'))",
							"type": "Expression"
						},
						"folderPath": "energy_history/input",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/activemeter_list')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "energy_datasets/storage_ds"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "meters.csv",
						"folderPath": "energy_history/config",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/energy_dly_mnthly')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "energy_datasets/storage_ds"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('energy_dly_mnthly', utcnow('yyyyMMdd'))",
							"type": "Expression"
						},
						"folderPath": "energy_dly_mnthly/input",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/energy_hrly_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "energy_datasets/storage_ds"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('energy_hrly_', utcnow('yyyyMMdd'))",
							"type": "Expression"
						},
						"folderPath": "energy_hrly/input",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/history_daily')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"year": {
						"type": "string",
						"defaultValue": "2022"
					}
				},
				"folder": {
					"name": "energy_datasets/storage_ds"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('history_daily',dataset().year,'_',utcnow('yyyyMMdd'))",
							"type": "Expression"
						},
						"folderPath": "energy_daily_history/input",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/history_monthly')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"year": {
						"type": "string",
						"defaultValue": "2022"
					}
				},
				"folder": {
					"name": "energy_datasets/storage_ds"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('history_monthly',dataset().year,'_',utcnow('yyyyMMdd'))",
							"type": "Expression"
						},
						"folderPath": "energy_month_history/input",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/hourlyOffset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "energy_datasets/storage_ds"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "offset.csv",
						"folderPath": "energy_hrly/config",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/site_loc_key')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "accuweather"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "site_loc.csv",
						"folderPath": "sharepoint/config",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "site_id",
						"type": "String"
					},
					{
						"name": "loc_key",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RettaDBrcks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-1558361433928880.0.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultRetta",
							"type": "LinkedServiceReference"
						},
						"secretName": "DatabricksToken"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "1:2",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "10.3.x-scala2.12",
					"newClusterInitScripts": [],
					"newClusterDriverNodeType": "Standard_DS3_v2",
					"clusterOption": "Autoscaling"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/google_api')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "RestService",
				"parameters": {
					"key": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultRetta",
							"type": "LinkedServiceReference"
						},
						"secretName": "google-api"
					}
				},
				"annotations": [],
				"typeProperties": {
					"url": "[parameters('google_api_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/metryIntg')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('metryIntg_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"Authorization": {
							"type": "AzureKeyVaultSecret",
							"store": {
								"referenceName": "AzureKeyVaultRetta",
								"type": "LinkedServiceReference"
							},
							"secretName": "metritoken"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FinGridAPILoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FirstDayOfPreviousMonth",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartDate",
							"value": {
								"value": "@replace(startOfMonth(adddays(startOfMonth(utcnow()),-1)),'00.0000000Z','00Z')\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LastDayOfPreviousMonth",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "EndDate",
							"value": {
								"value": "@concat(formatDateTime(adddays(startOfMonth(utcnow()),-1),'yyyy-MM-dd'),'T23:59:00Z')\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Save In TempEnergy_Coeff_Monthly",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "FirstDayOfPreviousMonth",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LastDayOfPreviousMonth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "dbo.TempEnergy_Coeff_Monthly"
							}
						],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['value']"
										},
										"sink": {
											"name": "value",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['start_time']"
										},
										"sink": {
											"name": "start_time",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "$['end_time']"
										},
										"sink": {
											"name": "end_time",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_FinGridAPI",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('?start_time=',variables('StartDate'),'&end_time=',variables('EndDate'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TempTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Load Energy_Coeff_Monthly",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Save In TempEnergy_Coeff_Monthly",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "RettaDW",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "insert into [dbo].Energy_Coeff_Monthly([mnthly_AvgVal],[mnthly_strt_dt],[mnthly_end_dt],energy_type,country_code,data_source,YrMnth)\n\nSELECT \n\tCast(avG([value])AS DECIMAL(18,5)) [mnthly_AvgVal],\n\tMIN(cast(start_time as date))  [mnthly_strt_dt],\n\tMAX(cast(end_time as date))[mnthly_end_dt],\n\t'Electricity' energy_type ,\n\t'FIN' country_code,\n\t'FinGrid' data_source ,\n\tCONCAT(YEAR(MIN(cast(start_time as date))),FORMAT(MIN(cast(start_time as date)),'MM') ) as YrMnth\n\tFROM \n\t[dbo].TempEnergy_Coeff_Monthly\ngroup by \n\tConcat(cast(substring(convert(varchar, dateadd(month, datediff(month, 0, start_time) , 0), 112), 0, 7) as int),'01')\nhaving  \n\tMIN(cast(start_time as date)) not in (select distinct cast([mnthly_strt_dt]as date) from [dbo].Energy_Coeff_Monthly)\n\n----Below code will Update YrMnth date column-----\n\n\tUpdate Yrmn\n\tset YrMnth=cast(format(mnthly_strt_dt,'yyyyMM') AS int)\n\tfrom  [dbo].Energy_Coeff_Monthly Yrmn\n\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Remove TempEnergy_Coeff_Monthly",
						"description": "Remove TempEnergy_Coeff_Monthly from the DW",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Load Energy_Coeff_Monthly",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "RettaDW",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "\ndrop table [dbo].TempEnergy_Coeff_Monthly"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Update Electric_Coeff_Rolling_12M",
						"description": "Updpte data for rolling 12month",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Remove TempEnergy_Coeff_Monthly",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "RettaDW",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": ";WITH data AS (\n  SELECT \n    mnthly_strt_dt, \n    mnthly_AvgVal,\n    ROW_NUMBER() OVER (ORDER BY mnthly_strt_dt) AS row_num\n  FROM \n\tEnergy_Coeff_Monthly\n), \nsum_data AS (\n  SELECT \n\trow_num,\n\tmnthly_AvgVal,\n    mnthly_strt_dt, \n    SUM(mnthly_AvgVal) OVER (ORDER BY mnthly_strt_dt ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) AS sum_mnthly_AvgVal\n  FROM \n\tdata\n),FindRolling as\n(\nSELECT \n  mnthly_strt_dt, \n  mnthly_AvgVal,row_num,\n  sum_mnthly_AvgVal / 12 AS Coeff_Rolling_12M\nFROM \n\tsum_data \nWHERE \n\trow_num >= 12\n)\n--select * \nUpdate en_co_mon\nset rolling_12m_units=Cast(Coeff_Rolling_12M AS DECIMAL(18,5)) \nfrom \n\tFindRolling fin Inner join [dbo].[energy_coeff_Monthly] en_co_mon\non fin.mnthly_strt_dt=en_co_mon.mnthly_strt_dt\n\n\n\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Save In CO2emission",
						"description": "Save data in CO2emission",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update Electric_Coeff_Rolling_12M",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "RettaDW",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "INSERT INTO [dbo].[CO2_emission]\n           ([building_ID]\n           ,[site_ID]\n           ,[building_name]\n           ,[Heating_Network]\n           ,[Company_ID]\n           ,[Network_ID]\n           ,[yrmnth]\n           ,[energy_type]\n           ,[rolling_12m_units]\n           ,[Total_emission_energy_cal]\n           ,[Total_emission_efficiency_cal])\n\nSELECT DISTINCT\n\tdi_bui.building_ID,\n\tdi_sit.site_id,\n\tdi_sit.street AS building_name,\n\tdi_sit.Heating_Network,\n\tdi_sit.company_id,\n\tdi_sit.network_id,\n\tcast(format(en_coe.mnthly_strt_dt,'yyyyMM') AS int) AS [yrmnth],\n\ten_year.energy_type AS energy_type,\n\ten_year.rolling_12m_units AS rolling_12_units,\n\ten_year.rolling_12m_units* en_coe.rolling_12m_units/100000 AS Total_emission_energy_cal,\n\tNULL AS Total_emission_efficiency_cal\nFROM\n    Energy_Coeff_Monthly  en_coe\n\tINNER JOIN [dbo].[energy_yearly] en_year on en_year.mnthly_strt_dt=en_coe.mnthly_strt_dt\n\tINNER JOIN [dbo].[dim_building] di_bui on di_bui.building_ID=en_year.building_ID\n\tINNER JOIN [dbo].[dim_site] di_sit on di_sit.site_ID=di_bui.site_ID\n\t\nWHERE \n\tlower(en_year.energy_type)='electricity' and  \n\tdi_bui.Rec_Status='Active' and\n\tdi_sit.Rec_Status='Active'\t \n\tand Concat(di_bui.building_ID,di_sit.site_id,cast(format(en_coe.mnthly_strt_dt,'yyyyMM') AS int) ) NOT IN (select distinct concat( building_id,site_id,yrmnth ) from [dbo].[CO2_emission] where lower(energy_type)='electricity' )\n\nORDER BY \n\t1\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartDate": {
						"type": "String",
						"defaultValue": "2023-01-10T00:00:00Z"
					},
					"EndDate": {
						"type": "String",
						"defaultValue": "2023-01-10T00:00:00Z"
					}
				},
				"folder": {
					"name": "finGrid"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FinGridAPI')]",
				"[concat(variables('factoryId'), '/datasets/TempTable')]"
			]
		}
	]
}